***MAIN.JAVA***
package com.max.idea;

import java.util.Comparator;
import java.util.Scanner;
import java.io.*;
public class Main {

    public void throwsFunc() throws java.io.FileNotFoundException {
        File file = new File("lines.txt");
        System.out.println(file.exists());
        Scanner scan = new Scanner(file);
    }

    public static void main(String[] args) {
        Main main = new Main();
        Student[] st = new Student[5];
        st[0] = new Student("Владислав", "Кириленко", 18, 53, 173, 202, "Комп'ютерні науки");
        st[1] = new Student("Іван", "Іванов", 22, 67, 182, 508,  "Інженерія програмного забезпечення");
        st[2] = new Student("Григорій", "Остапенко", 37, 120, 199, 105, "Комп'ютерна інженерія");
        st[3] = new Student("Анастасія", "Гаврилова", 23, 49, 164, 644,  "Німецька філологія");
        st[4] = new Student("Андрій", "Кирилов", 19, 75, 178, 371,  "Системний аналіз");
        st[0].anotherSortStudents(st, new Comparator<Student>() {
            @Override
            public int compare(Student o1, Student o2) {
                return o1.age - o2.age;
            }
        });
        st[0].anotherSortStudents(st, new Condition1());
        st[0].anotherSortStudents(st, (w, v)-> w.age - v.age);
        //------------------------------------------------------------------------------------
        int a, d;
        try {
            d = 0;
            a = 42 / d;
            System.out.println("This won't be displayed.");
        } catch (ArithmeticException ae) {
            System.out.println("Division by zero.");
        }
        System.out.println("Text after catch");

        try {
            main.throwsFunc();
        }
        catch(FileNotFoundException fnfe) {
            System.out.println("This file doesn't exist.");
        } finally {
            System.out.println("this code will be displayed anyway.");
        }
        Posada.middle.setSalary(1500);
        for(Posada p : Posada.values()) {
            System.out.println("salary of " + p + " is: " + p.getSalary() + "\n days of holidays: " + p.getHolidays());
        }
    }

}
class Condition1 implements Comparator<Student>{
    @Override
    public int compare(Student o1, Student o2) {
        return o1.surname.compareTo(o2.surname);
    }
}


// 36. Створіть метод, який дозволяє сортувати масив Студентів у відповідності до критерію сортування(за віком, за
// прізвищем та інше). Масив та критерій сортування передаються як критерії методу. Сортування реалізувати методом
// =бульбашки=

// 48. Створіть просту  ієрархію спадкування, яка відповідає сутностям Людина, Студент, Викладач з відповідними
// властивостями. Продемонструйте перевантаження конструкторів та методів, перевизначення методів, особливості роботи
// конструкторів при спадкуванні.

// 39. Продемонструйте у коді  2 способа  обробки виключних ситуацій у методі (з try-catch и  throws), а також
// особливості використання блока finally. У якості обробляємо виключення оберіть будь яке =checked= виключення.

// 49. Створіть тестовий приклад, який демонструє відмінності при використанні різних модифікаторів доступу.

// 33. Створіть enum Посади, яке відповідає можливій структурі посад підприємства. Продемонструйте  можливість задавати
// властивості, конструктори та методи в enum. Забезпечте при цьому можливості змінювати посадові оклади та кількість
// днів відпустки.
***PERSON.JAVA***
package com.max.idea;

public class Person {
    String surname;
    String name;
    int age;
    int weight;
    int height;
    Person(String surname, String name, int age, int weight, int height) {
        this.surname = surname;
        this.name = name;
        this.age = age;
        this.weight = weight;
        this.height = height;
    }
    Person() {
        this.surname = "no";
        this.name = "no";
        this.age = 0;
        this.weight = 0;
        this.height = 0;
    }
    @Override
    public String toString() {
        return "surname: " + surname + "\nname: " + name + "\nage: " + age + "\nweight: " + weight + "\nheight: " + height;
    }
}
***POSADA.JAVA***
package com.max.idea;

public enum Posada {
    trainee(300, 32),
    junior(500, 34),
    middle(1100, 35),
    senior(2000, 38),
    team_lead(3200, 38),
    deputy_director(4500, 30),
    director(5200,35);

    private int salary;
    private int holidays;

    Posada(int salary, int holidays) {
        this.salary = salary;
        this.holidays = holidays;
    }
    public void setSalary(int salary) {
        this.salary = salary;
    }
    public int getSalary() {
        return salary;
    }
    public void setHolidays(int holidays) {
        this.holidays = holidays;
    }
    public int getHolidays() {
        return holidays;
    }
}
***STUDENT.JAVA***
package com.max.idea;

import java.util.Comparator;

public class Student extends Person {
    int groupNum;
    String specialty;
    Student(String surname, String name, int age, int weight, int height, int groupNum, String specialty) {
        super(surname, name, age, weight, height);
        this.groupNum = groupNum;
        this.specialty = specialty;
    }
    Student() {
        super();
        this.groupNum = 0;
        this.specialty = "no";
    }
    void sortStudents(Student[] st, int num) {
        Student buf;
        boolean isSorted = false;
        System.out.println("sort by: 1 - age, 2 - number of group, 3 - surname, 4 - specialty.");
        switch (num) {
            case 1 -> {
                while (!isSorted) {
                    isSorted = true;
                    for (int i = 0; i < st.length - 1; i++) {
                        if (st[i].age > st[i + 1].age) {
                            isSorted = false;

                            buf = st[i];
                            st[i] = st[i + 1];
                            st[i + 1] = buf;
                        }
                    }
                }
                for (Student student : st) {
                    System.out.println(student.toString());
                }
            }
            case 2 -> {
                while (!isSorted) {
                    isSorted = true;
                    for (int i = 0; i < st.length - 1; i++) {
                        if (st[i].groupNum > st[i + 1].groupNum) {
                            isSorted = false;

                            buf = st[i];
                            st[i] = st[i + 1];
                            st[i + 1] = buf;
                        }
                    }
                }
                for (Student student : st) {
                    System.out.println(student.toString());
                }
            }
            case 3 -> {
                while (!isSorted) {
                    isSorted = true;
                    for (int i = 0; i < st.length - 1; i++) {
                        if (st[i].surname.compareTo(st[i + 1].surname) > 0) {
                            isSorted = false;

                            buf = st[i];
                            st[i] = st[i + 1];
                            st[i + 1] = buf;
                        }
                    }
                }
                for (Student student : st) {
                    System.out.println(student.toString());
                }
            }
            case 4 -> {
                while (!isSorted) {
                    isSorted = true;
                    for (int i = 0; i < st.length - 1; i++) {
                        for (int j = 0; j < st[i].specialty.length(); j++) {
                            if (st[i].specialty.compareTo(st[i + 1].specialty) > 0) {
                                isSorted = false;

                                buf = st[i];
                                st[i] = st[i + 1];
                                st[i + 1] = buf;
                            }
                        }
                    }
                }
                for (Student student : st) {
                    System.out.println(student.toString());
                }
            }
            default -> {
                System.out.println("You typed a wrong number, try again.");
                return;
            }
        }
    }
    void anotherSortStudents(Student[] st, Comparator<Student> condition) {
        Student buf;
        boolean isSorted = false;
                while (!isSorted) {
                    isSorted = true;
                    for (int i = 0; i < st.length - 1; i++) {
                        if (condition.compare(st[i], st[i+1]) < 0) {
                            isSorted = false;

                            buf = st[i];
                            st[i] = st[i + 1];
                            st[i + 1] = buf;
                        }
                    }
                }
                for (Student student : st) {
                    System.out.println(student.toString());
                }
            }


@Override
    public String toString() {
        return super.toString() + "\nGroup number: " + groupNum + "\nAge: " + age + "\nSpecialty: " + specialty;
}
}
***TEACHER.JAVA***
package com.max.idea;

public class Teacher extends Person {
    String department;
    Teacher(String surname, String name, int age, int weight, int height, String department) {
        //super(surname, name, age, weight, height);
        this.department = department;
    }
    Teacher() {
        //super();
        this.department = "no";
    }
    @Override
    public String toString() {
        return super.toString() + "\ndepartment: " + department;
    }
}
