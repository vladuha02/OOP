***STUDENT.JAVA***
package laba3;

import java.util.ArrayList;

class Student implements Comparable<Student> {
    String surname;
    String name;
    int age;
    int height;
    int weight;
    int studentID;

    Student(String surname, String name, int age, int height, int weight, int studentID) {
        this.surname = surname;
        this.name = name;
        this.age = age;
        this.height = height;
        this.weight = weight;
        this.studentID = studentID;
    }

    @Override
    public String toString() {
        return "Student{" +
                "surname='" + surname + '\'' +
                ", name='" + name + '\'' +
                ", age=" + age +
                ", height=" + height +
                ", weight=" + weight +
                ", studentID=" + studentID +
                '}';
    }

    @Override
    public int compareTo(Student o) {
        return this.name.compareTo(o.name);
    }
}
***GROUP.JAVA***
package laba3;

import java.util.*;
import java.util.function.Predicate;
import java.util.stream.Collectors;

public class Group {
    int groupNum;
    Set<Student> students = new TreeSet<>();

    Group(int groupNum) {
        this.groupNum = groupNum;
    }

    boolean addStudentToGroup(Student st) {
        boolean flag;
        if(!(students.add(st))) {
            System.out.println("This student can't be added to the group.");
            flag = false;
        }
        else flag = true;
        return flag;
    }

    boolean changeStudentGroup(Student st, Group newGr) {
        boolean flag;
        if(this.students.contains(st) && !(newGr.students.contains(st))) {
            this.students.remove(st);
            newGr.students.add(st);
            flag = true;
        }
        else flag = false;
        return flag;
    }

    List<Student> searchByCondition(Predicate<Student>...conditions) {
        List<Student> result;
        Predicate<Student> totalCondition = w -> true;
        for(Predicate<Student> tempCondition: conditions) {
            totalCondition = totalCondition.and(tempCondition);
        }
        result = students.stream().filter(totalCondition).collect(Collectors.toList());
        return result;
    }

    String groupInfo(Comparator<Student> condition) {
        int[] num = {0};
        StringBuilder result = new StringBuilder();
        students.stream().sorted(condition).forEach(w -> {
            result.append(num[0]).append(w.toString()).append('\n');
            num[0]++;
        } );
        System.out.println();
        return result.toString();
    }

    int[] numberChain(int[] arr) {
        Arrays.sort(arr);
        int min = arr[0];
        int[][] chains = new int[arr.length][arr.length];
        int i = 1;
        byte k = 0;
        byte l = 0;
        byte incr = 1;
        int[] result;

        while(min + incr <= arr[arr.length-1]) {
            if(chains[k][0] != min) chains[k][0] = min;
            for (; i < arr.length; i++) {
                if (min + incr == arr[i]) {
                    chains[k][l + 1] = arr[i];
                    l++;
                    incr++;
                }
                else break;
            }
            l = 0;
            if(i == arr.length) i--;
            if(chains[k].length > 1) {
                min = arr[i];
                chains[k + 1][0] = min;
                incr = 1;
                k++;
                i++;
            }
        }

        int temp_length = 0;
        for(int j = 0; j < chains.length; j++) {
            for(int m = 0; m < chains[j].length; m++) {
                if(chains[j][m] != 0) temp_length++;
                else break;
            }
            if(temp_length != 0) {
                chains[j] = Arrays.copyOf(chains[j], temp_length);
                temp_length = 0;
            }
            else chains[j] = new int[0];
        }
        int temp_index = 0;
        int max_length = chains[0].length;
        for(i = 0; i < k; i++) {
            if(chains[i].length > max_length) temp_index = i;
        }
        result = chains[temp_index];
        return result;
    }

}
